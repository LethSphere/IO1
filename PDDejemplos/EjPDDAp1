# -*- coding: utf-8 -*-
"""
@author: Violeth V, Julian S, Esteban L
"""
#ITERA  PARA EL MENOR VALOR DE X
def iter(numero_iteraciones, valor_inial):
    for i in range(numero_iteraciones - 1):
        iter.append(min_valor(sol_iteracion[i][0]))
#CALCULA LA FUNCION RECURSIVA EVALUADA EN X
def fun(x, funcion_recursiva):
    if x == 0:
        return x + fun_rec* (0.5**x)
    return 3 + x + fun_rec* (0.5**x)
#ENCUENTRA EL MENOR VALOR POSIBLE PARA LA ETAPA Y EN LA VARIABLE X
def min_valor(fun_rec):
    xn = []
    xn.append(funcion_lote(0, funcion_recursiva))
    #EVALUA POR CADA CONDICION
    while xn[len(xn) - 1] >= funcion_lote(len(xn), funcion_recursiva) or xn[len(xn) - 1] >= funcion_lote(len(xn) + 1, funcion_recursiva):
        xn.append(funcion_lote(len(xn), funcion_recursiva))
    return min(xn), xn.index(min(xn))
    #MAIN
    numero_iteraciones = 7
    funcion_inial = 10
    solucion = iteracion(numero_iteraciones, funcion_inial)

    for i in range(len(solucion)):
        print(
            f'En la ronda de producci√≥n {i+1}, la cantidad optima es de {solucion[i][1]} con un costo de {solucion[i][0]*100}$')
